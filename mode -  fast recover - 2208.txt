import scipy.stats as stats 
import scipy.stats as stats 

# Default variables
PKT_SIZE = int(1450)
PKT_NUMS = int(5000)
PROP_TIME = int(10)
START_TIME = 0 
END_TIME = 5

def transmit(t, size, channel, remained):
    # current available bandwidth (remained bw from prev time + current bw)
    pkt_size = size; time = t
    bw = remained + channel.bw[time]
    num_packets = 0

    # get the number of packets that can be transmitted at time t and remained bw at time t
    num_packets += int(bw / pkt_size)
    remained_bw = int(bw % pkt_size)

    # if current bw is not sufficient
    while num_packets < 1:
        if time == int(END_TIME*1000) - 1: # ms
            break
        time += 1
        bw = remained_bw + channel.bw[time]
        num_packets += int(bw / pkt_size)
        remained_bw = int(bw % pkt_size)

    return time - t + 1, num_packets, remained_bw

class Channel():
    def __init__(self, bandwidth):
        self.bw = bandwidth
        self.prop = PROP_TIME # ms

class Packet():
    def __init__(self, seq, size):
        # TCP header used in this simulation
        self.src = ""
        self.dst = ""
        self.seq = seq # sequence number of this packets
        self.ack_seq = 0 # ack sequence

        # used for only simulation, not offical header
        self.start_time = 0 # send start time 
        self.ack_arrival = 0 # ack arrival time
        self.bs_arrival = 0 # bs arrival time
        self.recv_arrival = 0 # receiver arrival time

        ################ IMPLEMENT ##################### 
        # define your own observed data here if needed #

        ################################################

class BaseStation():
    def __init__(self, name, threshold):
        self.name = name
        self.queue_length = threshold
        self.queued = []
        self.next_available = 0
        self.remained_bw = 0 # available bw from prev timestep
        
    def admit(self, t, pkts, downlink):
        loss = []; admit = []

        if self.next_available != 0 and self.next_available > t:
            # drop or queue
            for p in pkts:
                if len(self.queued) >= self.queue_length:
                    loss.append(p)
                else:
                    self.queued.append(p)

            return admit, loss

        # downlink admit or not
        if len(self.queued) > 0:
            tx_time, num_packets, remained_bw = transmit(t, PKT_SIZE, downlink, self.remained_bw)
            self.remained_bw = remained_bw
            self.next_available = t + tx_time

            for i in range(0, num_packets):
                p = self.queued.pop(0)
                p.recv_arrival = t + tx_time + PROP_TIME
                admit.append(p)
                # exit if list is empty
                if len(self.queued) == 0:
                    break
                
        # drop or queue
        for p in pkts:
            if len(self.queued) >=  self.queue_length:
                loss.append(p)
            else:
                self.queued.append(p)
        
        
        return admit, loss

class Client():
    def __init__(self, src, dst, bandwidth, pkt_list=[], cc=False):
        self.src = src; self.dst = dst; self.cc = cc

        # variables for senders
        self.pkt_list = pkt_list # packet list for sending
        self.tx_start = 0; # pointer for first transmitted packet (tx_window)
        self.seq = 0 # pointer for next packet sequence (tx_window)
        self.next_available = 0
        self.remained_bw = 0
        self.count = 0

        
        # variables for clients
        self.channel = Channel(bandwidth)
        
        # variables for receivers
        self.ack_sequence = 0 # init
        self.retx = 0
        
        ############################### IMPLEMENT ##############################################
        # implement your own congestion control with parameters!
        # note 1: you can use any variable from Packet() class
        # note 2: you may add additional variable into PACKET() class
        # note 3: you can use any addtional parameter for congestion control e.g. avgRTT, etc.
        # note 4: you can adjust the current init values 
        ########################################################################################
        self.avgRTT = 4 * PROP_TIME # RTT for 2 * (uplink.prop + downlink.prop) 
        self.cwnd = 4 # init value
        self.inflight = 0
        self.lostack = 0
        self.prev_cwnd = 10
        # self.estimatedRTT = 0
    

    ############## IMPLEMENT ###############################
    # implement the send function of sender!
    # your job is to send the packets in terms of cwnd
    # note 1: sending without congestion control is provided
    #########################################################
    def send(self, t):
        # transmission is busy
        if t < self.next_available:
            return [] # empty list
        
        # transmission done
        if self.seq == PKT_NUMS:
            return [] # empty list
        
        # packets to transmit
        pkts = []

        # next packet pointer init
        next_seq = 0
        
        # without congestion control: send packets with max bandwidth
        if (self.cc == False):
            tx_time, num_packets, remained_bw = transmit(t, PKT_SIZE, self.channel, self.remained_bw)
            self.remained_bw = remained_bw

            for i in range(0, num_packets):
                self.pkt_list[self.seq].start_time = t
                self.pkt_list[self.seq].bs_arrival = t + tx_time + PROP_TIME
                pkts.append(self.pkt_list[self.seq])
                self.seq += 1
                if self.seq == PKT_NUMS:
                    break
            
            # next available transmit
            self.next_available = t + tx_time # ms
        
        ############### IMPLEMENT #####################################
        # with congestion control: send packets with cwnd
        # implement your send function with congestion control! (cwnd)
        ###############################################################
        if (self.cc == True):
            if self.inflight < self.cwnd:
                tx_time, num_packets, remained_bw = transmit(t, PKT_SIZE, self.channel, self.remained_bw)
                self.remained_bw = remained_bw

                for i in range(0, num_packets):
                    self.pkt_list[self.seq].start_time = t
                    self.pkt_list[self.seq].bs_arrival = t + tx_time + PROP_TIME
                    
                    pkts.append(self.pkt_list[self.seq])
                    #print("[SEND] seq:",self.pkt_list[self.seq].seq, "inflight:", self.inflight, "CWND", self.cwnd)
                    self.seq += 1
                    self.inflight += 1
                    if self.seq == PKT_NUMS:
                        break
                self.next_available = t + tx_time
        ###############################################################

        # return packet lists
        return pkts


    #################### IMPLEMENT recv() #######################
    # naive TCP ack generation is followed  
    # implement your own ack generation
    # note 1: you can add additional variables from observed data
    # note 2: you can generate advanced ack
    # note 3: please refer chapter 9. Transport Layer
    #############################################################
    def recv(self, t, pkts):
        if len(pkts) == 0:
            return False # no acks
        
        # generate ack packet
        # cumulative ack send only one acknowledgement
        ack = Packet(self.seq, PKT_SIZE)

        # implement here #
        for p in pkts:
            if self.ack_sequence == p.seq:
                #print("[RECV GOOD] seq:", p.seq)
                self.ack_sequence += 1

            else:
                #print("[RECV FAIL] expect:", self.ack_sequence, " but:",p.seq)
                self.retx += 1

        ack=p
        ack.ack_arrival = ack.recv_arrival + 2 * PROP_TIME 
        ack.ack_seq = self.ack_sequence

        # return ack
        #print("send ack.ackseq:", ack.ack_seq,"\n")
        return ack

    ################## IMPLEMENT congestion control #################
    # naive congestion control is followed
    # implement your own congestion control using the ack packet!
    ###################################################################
    def congestion_control(self, t, ack):
        loss = False
        ignore = False
        if ack == False:
            return False
        
        # return true if all the packets are transmitted to receiver
        if ack.ack_seq == PKT_NUMS:
            return True
        # without congestion control, simply measure avgRTT
        if self.cc == False:
            ack_seq = ack.ack_seq
            sum = 0
            for i in range(self.tx_start, ack_seq):
                sum += ack.ack_arrival - ack.start_time

            acked_packets = ack_seq - self.tx_start

            if acked_packets:
                self.avgRTT = int(sum / acked_packets)
            
            self.tx_start = ack_seq
            
            return False

        ########## IMPLEMENT ####################
        # naive congestion control are following
        # implement your own congestion control
        #########################################
        if self.cc == True:
            ack_seq = ack.ack_seq
            sum = 0
            for i in range(self.tx_start, ack_seq):
                sum += ack.ack_arrival - ack.start_time
                
            acked_packets = ack_seq - self.tx_start
            
            if acked_packets:
                self.avgRTT = int(sum / acked_packets)
            
            # parameter for cwnd
            AIMD_increase = 1
            AIMD_decrease = 4

            # get acknowledge packets
            
            expect_ack = self.tx_start +1

            if expect_ack > ack_seq and self.lostack !=ack_seq:
                #print("[ACK loss] expect:", expect_ack, " come:",ack_seq)
                self.prev_cwnd = int(self.cwnd * 0.7)
                self.cwnd = int(max(2, int(self.cwnd/AIMD_decrease)))
                self.seq = ack_seq
                self.tx_start = ack_seq
                self.inflight =0
                self.lostack = ack_seq
                self.retx +=1
                self.count = 0
                

            elif expect_ack > ack_seq and self.lostack == ack_seq:
                #print("[Duplicated ACK] loastack:", self.lostack, "ack_seq:", ack_seq)
                
                return False
               

            else:
                #print("[ACK success] expect:",expect_ack, " come:",ack_seq, "COUNT", self.count)
                
                if self.cwnd < self.prev_cwnd:
                    self.cwnd += AIMD_increase
                else:
                    self.count += 1
                    if self.count == int(self.cwnd / AIMD_increase):
                        self.count = 0
                        self.cwnd += 1

                self.tx_start =ack_seq
                self.inflight -=1
        
                


        return False

